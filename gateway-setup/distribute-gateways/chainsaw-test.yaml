apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: gloo-installation-test
spec:
  concurrent: false
  timeouts:
    exec: 360s
  steps:
  - try:
    - assert:
        resource:
          ($values.glooVersion != null): true
    - assert:
        resource:
          ($values.glooLicense != null): true
    - assert:
        resource:
          ($values.glooMeshVersion != null): true
    - assert:
        resource:
          ($values.glooMeshLicense != null): true
  - try:
    - script:
        content: |
          bash scripts/preflight.sh
  - clusters:
      k3d-gloo:
        kubeconfig: resources/test-kubeconfig.yaml
        context: k3d-gloo
    cluster: k3d-gloo
    try:
    - script:
        env:
        - name: GLOO_VERSION
          value: ($values.glooVersion)
        - name: GLOO_GATEWAY_LICENSE_KEY
          value: ($values.glooLicense)
        - name: GLOO_MESH_VERSION
          value: ($values.glooMeshVersion)
        - name: GLOO_MESH_LICENSE_KEY
          value: ($values.glooMeshLicense)
        - name: GLOO_MESH_CLUSTER
          value: k3d-gloo
        - name: REMOTE_CLUSTER
          value: k3d-worker
        content: |
          bash scripts/mgmt-setup.sh
    - assert:
        resource:
          apiVersion: admin.gloo.solo.io/v2
          kind: WorkspaceSettings
          metadata:
            name: global
            namespace: gloo-mesh-config
          spec:
            options:
              serviceIsolation:
                enabled: false
              federation:
                enabled: false
                serviceSelector:
                - {}
              eastWestGateways:
              - selector:
                  labels:
                    istio: eastwestgateway 
  - clusters:
      k3d-worker:
        kubeconfig: resources/test-kubeconfig.yaml
        context: k3d-worker
    cluster: k3d-worker
    try:
    - script:
        env:
        - name: GLOO_VERSION
          value: ($values.glooVersion)
        - name: GLOO_GATEWAY_LICENSE_KEY
          value: ($values.glooLicense)
        - name: GLOO_MESH_VERSION
          value: ($values.glooMeshVersion)
        - name: GLOO_MESH_LICENSE_KEY
          value: ($values.glooMeshLicense)
        - name: REMOTE_CLUSTER
          value: k3d-worker
        content: |
          bash scripts/worker-setup.sh
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: gloo-control-plane
spec:
  concurrent: false
  steps:
  - clusters:
      k3d-gloo:
        kubeconfig: resources/test-kubeconfig.yaml
        context: k3d-gloo
    cluster: k3d-gloo
    try:
    - assert:
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: gloo
            namespace: gloo-system
          status:
            readyReplicas: 1
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: test-agent-connected
spec:
  concurrent: false
  steps:
  - clusters:
      k3d-gloo:
        kubeconfig: resources/test-kubeconfig.yaml
        context: k3d-gloo
    cluster: k3d-gloo
    try:
    - script:
        content: |
          $HOME/.gloo-mesh/bin/meshctl check
        check:
          (contains($stdout, 'k3d-worker')): true
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: test-gateway-created
spec:
  concurrent: false
  timeouts:
    exec: 60s
  steps:
  - clusters:
      k3d-gloo:
        kubeconfig: resources/test-kubeconfig.yaml
        context: k3d-gloo
    cluster: k3d-gloo
    try:
    - script:
        content: |
          bash scripts/create-gateway.sh
  - clusters:
      k3d-worker:
        kubeconfig: resources/test-kubeconfig.yaml
        context: k3d-worker
    cluster: k3d-worker
    try:
    - assert:
        resource:
          apiVersion: gateway.networking.k8s.io/v1
          kind: Gateway
          metadata:
            name: distributed-gateway
            namespace: gloo-system
          spec:
            gatewayClassName: gloo-gateway
            listeners:
            - name: http
              protocol: HTTP
              port: 8080
              hostname: mydomain.com
              allowedRoutes:
                namespaces:
                  from: All
    - assert:
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: netshoot
            namespace: default
          status:
            readyReplicas: 1
    - script:
        content: |
          kubectl exec deploy/netshoot -n default -- curl -i -w '%{http_code}' -o /dev/null -s http://gloo-proxy-distributed-gateway.gloo-system:8080/status/200 -H "Host: mydomain.com"
        outputs:
        - name: statuscode
          value: ($stdout)
    - assert:
        resource:
          ($statuscode): "200"
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: test-env-cleanup
spec:
  concurrent: false
  steps:
  - try:
    - script:
        content: |
          bash scripts/teardown.sh