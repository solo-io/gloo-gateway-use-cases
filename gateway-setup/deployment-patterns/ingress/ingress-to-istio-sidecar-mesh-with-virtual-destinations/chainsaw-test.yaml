apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: gloo-setup
spec:
  concurrent: false
  timeouts:
    exec: 180s
  steps:
  - try:
    - assert:
        resource:
          ($values.glooMeshLicense != null): true
    - assert:
        resource:
          ($values.glooMeshVersion != null): true
    - assert:
        resource:
          ($values.glooOperatorVersion != null): true
    - assert:
        resource:
          ($values.istioVersion != null): true
    - assert:
        resource:
          ($values.repo != null): true
    - assert:
        resource:
          ($values.glooVersion != null): true
    - assert:
        resource:
          ($values.glooLicense != null): true
  - try:
    - script: 
        content: |
          bash scripts/preflight.sh
  - clusters:
      k3d-mgmt:
        kubeconfig: resources/test-kubeconfig.yaml
        context: k3d-mgmt
      k3d-cluster1:
        kubeconfig: resources/test-kubeconfig.yaml
        context: k3d-cluster1
      k3d-cluster2:
        kubeconfig: resources/test-kubeconfig.yaml
        context: k3d-cluster2
    cluster: k3d-mgmt
    try:
    - script:
        env:
        - name: MGMT_CLUSTER
          value: k3d-mgmt
        - name: GLOO_MESH_LICENSE_KEY
          value: ($values.glooMeshLicense)
        - name: GLOO_MESH_VERSION
          value: ($values.glooMeshVersion)
        - name: REMOTE_CLUSTER1
          value: k3d-cluster1
        - name: REMOTE_CLUSTER2
          value: k3d-cluster2
        - name: REMOTE_CONTEXT1
          value: k3d-cluster1
        - name: REMOTE_CONTEXT2
          value: k3d-cluster2
        content: |
          bash scripts/setup-mgmt.sh
  - cluster: k3d-cluster1
    try:
    - script:
        env: 
        - name: GLOO_OPERATOR_VERSION
          value: ($values.glooOperatorVersion)
        - name: CLUSTER_NAME
          value: k3d-cluster1
        - name: GLOO_MESH_LICENSE_KEY
          value: ($values.glooMeshLicense)
        - name: ISTIO_VERSION
          value: ($values.istioVersion)
        content: |
          bash scripts/setup-worker.sh
  - cluster: k3d-cluster2
    try:
    - script:
        env: 
        - name: GLOO_OPERATOR_VERSION
          value: ($values.glooOperatorVersion)
        - name: CLUSTER_NAME
          value: k3d-cluster2
        - name: GLOO_MESH_LICENSE_KEY
          value: ($values.glooMeshLicense)
        - name: ISTIO_VERSION
          value: ($values.istioVersion)
        content: |
          bash scripts/setup-worker.sh
  - cluster: k3d-cluster1
    try:
    - script:
        content: |
          bash scripts/bookinfo-part1.sh
  - cluster: k3d-cluster2
    try:
    - script:
        content: |
          bash scripts/bookinfo-part2.sh
  - cluster: k3d-cluster1
    try:
    - script:
        env: 
        - name: REPO
          value: ($values.repo)
        - name: CLUSTER_NAME
          value: k3d-cluster1
        - name: ISTIO_VERSION
          value: ($values.istioVersion)
        content: |
          bash scripts/multicluster-part1.sh
  - cluster: k3d-cluster2
    try:
    - script:
        env: 
        - name: REPO
          value: ($values.repo)
        - name: CLUSTER_NAME
          value: k3d-cluster2
        - name: ISTIO_VERSION
          value: ($values.istioVersion)
        content: |
          bash scripts/multicluster-part1.sh
  - cluster: k3d-mgmt
    try:
    - script:
        content: |
          bash scripts/multicluster-part2.sh
  - cluster: k3d-cluster1
    try:
    - script:
        content: |
          bash scripts/multicluster-part3.sh
  - cluster: k3d-cluster2
    try:
    - script:
        content: |
          bash scripts/multicluster-part4.sh
  - cluster: k3d-mgmt
    try:
    - script:
        content: |
          bash scripts/multicluster-part5.sh
  - cluster: k3d-cluster1
    try:
    - script:
        env: 
        - name: GLOO_GATEWAY_LICENSE_KEY
          value: ($values.glooGatewayLicense)
        - name: GLOO_VERSION
          value: ($values.glooVersion)
        - name: CLUSTER_NAME
          value: k3d-cluster1
        content: |
          bash scripts/install-gg.sh
  - try:
    - assert:
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: gloo
            namespace: gloo-system
          status:
            readyReplicas: 1
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: gloo-proxy-test
spec:
  concurrent: false
  steps:
  - try:
    - assert:
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: gloo-proxy-http
            namespace: gloo-system
          status:
            readyReplicas: 1
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: netshoot-test
spec:
  concurrent: false
  steps:
  - try:
    - assert:
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: netshoot
            namespace: default
          status:
            readyReplicas: 1
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: check-gloo-proxy-pods
spec:
  concurrent: false
  steps:
  - try:
    - script:
        content: |
          kubectl get pods -l gloo=kube-gateway -n gloo-system -ojsonpath='{.items[0].spec.containers[*].name}' | wc -w | awk '{$1=$1};1'
        outputs:
        - name: glooProxyContainerCount
          value: ($stdout)
    - assert:
        resource:
          ($glooProxyContainerCount): "3\n"
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: test-istiodiscoveryaddress
spec:
  concurrent: false
  steps:
  - try:
    - script:
        content: |
          kubectl get gatewayparameters gloo-gateway -n gloo-system -ojsonpath='{.spec.kube.istio.istioProxyContainer.istioDiscoveryAddress}'
        outputs:
        - name: discoveryaddress
          value: ($stdout)
    - assert:
        resource:
          ($discoveryaddress): "istiod-main.istio-system.svc:15012"
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: test-ingress-to-reviews
spec:
  concurrent: false
  steps:
  - try:
    - script:
        content: |
          kubectl exec deploy/netshoot -n default -- curl -i -w '%{http_code}' -o /dev/null -s http://gloo-proxy-http.gloo-system:8080/reviews/0
        outputs:
        - name: statuscode
          value: ($stdout)
    - assert:
        resource:
          ($statuscode): "200"
---
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: test-productpage-ingress
spec:
  concurrent: false
  steps:
  - try:
    - script:
        content: |
          kubectl exec deploy/netshoot -n default -- curl -i -w '%{http_code}' -o /dev/null -s http://gloo-proxy-http.gloo-system:8080/productpage
        outputs:
        - name: statuscode
          value: ($stdout)
    - assert:
        resource:
          ($statuscode): "200"